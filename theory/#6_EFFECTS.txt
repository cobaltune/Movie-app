
#6.0 Introduction

component가 처음 render될 때만 코드가 실행되길 함
혹은 첫번째 render에만 코드가 실행되고, 다른 state 변화에는 실행되지 않도록

ex ) API를 통해 데이터를 가져올 때

  첫 번째 component render에서 API를 call하고,
  이후에 state가 변화할 때, 그 API에서 데이터를 또다시 가져오고 싶진 않을테니까


#6.1 useEffect

원하는 바

- 특정 코드의 실행을 제한
  component가 맨 처음 render될 때만 딱 한 번 실행하고, 다시는 실행하지 않도록

`useEffect`
: 두 개의 argument를 가지는 function

  1. 첫 번째 argument : 우리가 딱 한 번만 실행하고 싶은 코드
  2. 두 번째 argument : see you next time byebye

쉽게 말해서 useEffect는 코드가 딱 한 번만 실행될 수 있도록 보호해 줌

  import { useState, useEffect } from 'react';

  function App() {
    const [counter, setValue] = useState(0);
    const onClick = () => setValue((prev) => prev + 1);
    console.log('i run all the time');
    useEffect(() => {
      console.log('CALL THE API ...');
    }, []);
    return (
      <div>
        <h1>{counter}</h1>
        <button onClick={onClick}>click me</button>
      </div>
    );
  }

  export default App;


#6.2 Deps

저번에 했던 state와 input (search bar)의 콤비네이션

  import { useState, useEffect } from 'react';

  function App() {
    const [counter, setValue] = useState(0);
    const [keyword, setKeyword] = useState('');
    const onClick = () => setValue((prev) => prev + 1);
    const onChange = (event) => setKeyword(event.target.value);
    console.log('i run all the time');
    useEffect(() => {
      console.log('CALL THE API ...');
    }, []);
      console.log('SEARCH FOR', keyword);
    return (
      <div>
        <input
          value={keyword}
          onChange={onChange}
          type='text'
          placeholder='Search here'
        />
        <h1>{counter}</h1>
        <button onClick={onClick}>click me</button>
      </div>
    );
  }

  export default App;

  /* 코드 해석
  input을 만들고 event listener를 연결하고, 이 function이 작동할 때 argument로 event를 받음
  그리고 event를 발생시킨 input에서 value를 받아서 그 value를 'keyword' state에 넣음
  그리고 그 keyword를 가져와서 input의 value로 사용하면
  우리가 원할 때 input을 조작할 수 있음 */


*문제
계속 버튼을 클릭했더니 ‘marvel’이 계속 검색됨, 우리는 search keyword에 변화가 있을 때만 ‘maevel’영화를 검색하고 싶음
(+ counter가 변화할 때에도 ‘marvel’영화를 검색하고 싶지 않음)
: state를 변화시킬 때마다 8, 12라인이 모두 다 실행되기 때문


배울 것
- 코드의 특정한 부분이 변화했을 때, 원하는 코드를 실행할 수 있는 방법
  (= `movie state`가 변화할 때만 user가 원하는 영화를 검색하고 싶음)

  function App() {
    const [counter, setValue] = useState(0);
    const [keyword, setKeyword] = useState('');
    const onClick = () => setValue((prev) => prev + 1);
    const onChange = (event) => setKeyword(event.target.value);
    console.log('i run all the time');
    useEffect(() => {
      console.log('CALL THE API ...');
    }, []);
    useEffect(() => {
      console.log('SEARCH FOR', keyword);
    }, [keyword]); // 여기가 바로 마법이 일어나는 지점
    console.log('SEARCH FOR', keyword);
    return (
      <div>
        <input
          value={keyword}
          onChange={onChange}
          type='text'
          placeholder='Search here'
        />
        <h1>{counter}</h1>
        <button onClick={onClick}>click me</button>
      </div>
    );
  }

+) keyword가 변화할 때 코드를 실행할거라고 react.js에게 알려주는 것

  useEffect(() => {
    console.log('SEARCH FOR', keyword);
  }, [/*x가 변화할 때 코드를 실행하고 싶은 x의 자리*/]);

그리하여 `counter`가 변화할 때에 두 번째 `useEffect`는 실행되지 않음, 위 코드는 `keyword`가 변화할 때만 실행됨
⇒ 이게 바로 우리가 빈 array를 써 주었을 때 코드가 단 한 번만 실행되는 이유, 왜냐하면 react.js가 아무것도 지켜보지 않으니까


*문제
아직 검색창이 완벽하게 동작한다고 할 수 없는데
: component가 시작될 때도 검색이 되고 있기 때문

  useEffect(() => {
      if (keyword !== '' && keyword.length > 5) {
        console.log('SEARCH FOR', keyword);
      }
    }, [keyword]);

  /* 코드 해석
  keyword가 빈 값이 아니라면, 그때 keyword를 검색에 조건을 덧붙여
  keyword의 길이가 5 이상부터 검색 */


언제 코드가 실행될지 결정하는 방법

- component가 생성되는 첫 시작점
- 무언가가 update될 때
- 특정한 keyword가 update될 때만


(원한다면 `keyword`, `counter`) 두 개를 합칠수도

  console.log('I run when keyword & counter change');
    }, [keyword, counter]);


#6.3 Recap

react.js에서 가장 멋진 점은 새로운 데이터가 들어올 때마다
바로 component를 refresh(새로고침)한다는 것

UI의 관점에서는 새로운 데이터가 들어올 때마다 자동으로 새로고침되는 게 좋은 일이긴 하다만,
어떤 코드들은 계속 실행되면 안 될 수도 있으니 이게 바로 우리가 `useEffect`를 사용하는 이유


`useEffect`
: 두 개의 argument를 가지는 `function`

1. argument는 우리가 실행시키고 싶은 코드
2. dependency (react.js가 지켜보려는 것)

그리고 그것들이 변화할 때, react.js가 코드를 실행시킴

  // react.js가 지켜볼 대상이 없기 때문에 한 번만 실행

  useEffect(() => {
      console.log('I run only once');
    }, []);


  // keyword가 변화할 때

    useEffect(() => {
      console.log("I run when 'keyword' changes");
    }, [keyword]);

  /* state에 있는 keyword로,
  그 keyword는 setKeyword라는 function으로 인해 변화됨
  setKeyword는 onChange라는 function에 의해 호출되고
  onChange는 사용자 input이 변화할 때 호출됨 */


  // counter가 변화할 때

    useEffect(() => {
      console.log("I run when 'counter' changes");
    }, [counter]);

  // keyword, counter 둘 중 하나라도 변화가 일어나면 코드 실행
    
    useEffect(() => {
      console.log('I run when keyword & counter change');
    }, [keyword, counter]);

  // [] 여긴 array이기 때문에 원하는 걸 여러 개 넣을 수 있음


우리에겐 선택지가 세 개가 있음

1. react.js가 아무것도 지켜보지 않는 것 = `[]` 빈 `array`
2. 한 개의 아이템만 지켜보는 것
3. 둘 중 하나가 실행되면 코드가 실행되도록

∴ 결국 코드를 언제 실행할지 선택하는 건 `useEffect`라는 것


#6.4 Cleanup

배울 것
- `Cleanup function` (그렇게 많이 쓰는 건 아님)

  function Hello() {
    return <h1>Hello</h1>;
  }

  function App() {
    const [showing, setShowing] = useState(false);
    const onClick = () => setShowing((prev) => !prev);
    return (
      <div>
        {showing ? <Hello /> : null} // javascript를 쓸 때에는 {} 꼭 중괄호
        <button onClick={onClick}>{showing ? 'Hide' : 'Show'}</button>
      </div>
    );
  }

  /* 코드 해석
  만약 showing이 true라면 <hello> component를 render */

+) component는 단지 jsx를 `return`하는 `function`
  jsx는 <html>은 아니지만 react에서 <html>과 흡사하게 쓸 수 있도록 한 구문


component를 없애버리거나(destroy), 생성(create)하고 있음

  function Hello() {
    useEffect(() => {
      console.log("I'm here!");
    });
    return <h1>Hello</h1>;
  }

  function App() {
    const [showing, setShowing] = useState(false);
    const onClick = () => setShowing((prev) => !prev);
    return (
      <div>
        {showing ? <Hello /> : null}
        <button onClick={onClick}>{showing ? 'Hide' : 'Show'}</button>
      </div>
    );
  }


`hide button`을 누를 때 component가 완전히 destroy되는 것을 확인할 수 있음

  function Hello() {
    useEffect(() => {
      console.log('created');
      return () => console.log('destroyd');
    });
    return <h1>Hello</h1>;
  }


react.js에서는 component가 destroy될 때 `function`을 실행할 수 있는데, 실행하고 싶으면
`effectFn`이 새로운 `function`을 `return`해야 함

위 코드를 다듬은 .ver

  function Hello() {
    function byFn() {
      console.log('bye');
    }

    function hiFn() {
      console.log('created');
      return byFn;
    }
    useEffect(hiFn, []);
    return <h1>Hello</h1>;
  }

  /* 코드 해석
  component(function hello)가 실행될 때, hiFn이 실행될 거고
  근데 이 component가 언제 파괴될지도 알고 싶으면 hiFn이 byFn을 return해야 함
  useEffect는 function을 받고, 이 function은 dependency가 변화할 때 호출됨
  우리의 경우에는 component가 처음 생성될 때 function이 호출된 후, 다시는 호출되지 않음 */


`useEffect`의 유용한 점

- 언제 코드를 실행할지 우리에게 선택권을 제공함
    - 우리는 시작할 때만 코드를 실행하게 할 수 있고
    - 무언가가 변화할 때 코드가 실행되도록 할 수도 있고
    - component가 파괴될 때 코드를 실행할 수도 있음
    

니콜라스 왈 : 이게 그렇게 자주 일어날 일은 아니지만 가끔은 해야 할 필요가 있을 수도 있음
react앱을 만들 때 이 `byFn`이 주로 필요하지는 않음, cleanup function을 사용하지 않음


이전에 했던 걸로 한번 돌아가 볼 건데, 조금 다른 방식으로 `function Hello()`안 `function` 부분을 작성해 볼 거임
→ 그게 많은 react.js 프로젝트에서 보게 될 구조가 될 테니까

사람들은 주로 이런 `function`들을 만들지 않고, 보통은 `useEffect`안에 모든 것을 작성함
`mount` 또는 `render`할 때 `console.log` hi를 찍어줄거임

  // Way 1)
  //useEffect(() => {}, []);

  useEffect(() => {
      console.log('hi');
      return () => console.log('bye');
    }, []);


  // Way 2)  이건 잘 안씀
  /* useEffect(function () {
      
    }, []); */

  useEffect(function () {
      console.log('hi');
      return function () {
        console.log('bye');
      }
    }, []);

여기서 한 것은 `function`을 `return`을 한 것뿐임


+) react `mount`, `render`란

- 마운트 (mount) : DOM 객체가 생성되고 브라우저에 나타나는 것을 의미
- 렌더 (render) : 컴포넌트의 기능과 모양새를 정의하는 함수로 리액트 요소를 반환

참고 사이트
[https://lktprogrammer.tistory.com/130](https://lktprogrammer.tistory.com/130)


- 컴포넌트가 `mount`되는 것과 `render`가 되는 것은 다름.
  맨 처음 컴포넌트가 `render`될 때는 component가 `mount`되지만, 다시 `props`나 `state`가 변경되어 `render`될 때는 `mount`가 되지 않음
  
- react의 `state`나 `props` 변화가 있을 때는 렌더 될 때 컴포넌트가 다시 `mount`되는 게 아니므로,
  *shouldComponentUpdate(nextProps, nextState) 나, componentWillRecieveProps(nextProps)* 쪽에서 그 변화를 감지해 관련 작업을 해줘야 함

참고 사이트
[https://ideveloper2.tistory.com/97](https://ideveloper2.tistory.com/97)