
#2.0 Introduction

Recat JS가 우리를 위해 해결해 주는 문제에 대한 이해
- 웹사이트에 UI를 interactivity(상호작용) 하게 만들어줌

간단한 바닐라 JS앱
- 화면에 버튼 하나와 텍스트 하나만 존재
- 매번 버튼을 클릭할 때마다 - 화면의 텍스트를 업데이트 ⇒ 클릭을 세고 싶음

이번 클래스에서 따라갈 접근 방법
: 바닐라 JS와 React JS를 비교하고, 왜 React JS가 더 좋은지 살펴볼 예정


#2.1 Before React

  <!DOCTYPE html>
  <html>
    <body>
      <span>Total clicks: 0</span>
      <button id="btn">Click me</button>
    </body>
    <script>
      let counter = 0;
      const button = document.getElementById('btn');
      const span = document.querySelector('span');
      function handleClick() {
        counter = counter + 1;
        span.innerText = `Total clicks: ${counter}`;
      }
      button.addEventListener('click', handleClick);
    </script>
  </html>

HTML을 만들고 - javascript에서 가져오고 - event를 감지하고 - 데이터를 업데이트 - html을 업데이트

위와 같은 방식으로 작업하면, 계속 가져와서 - 계속 event listener를 달고 - handleClick 만들고
- handleSecondClick 만들고 - handleeeeee 늪에 빠짐


React JS를 설치하기 위해서는 두 개의 javascript 코드를 import 해야 함
- react
- react-dom

  <!DOCTYPE html>
  <html>
    <body></body>
    <script src="https://unpkg.com/react@17.0.2/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@17.0.2/umd/react-dom.production.min.js"></script>
  </html>


#2.2 Our First React Element

React JS 규칙 중 하나
- <HTML>을 페이지에 직접 작성하지 않는 대신에 javascript 코드를 사용

React JS로 element를 생성하는 어려운 방법 (= 개발자들이 작업하는 방식은 아님)

  const span = React.createElement('span');const span = React.createElement('span');

  // const !원하는 이름! = React.createElement('!생성하고자 하는 HTML 태그 이름!');


React JS가 HTML을 생성하려면 react-dom을 사용해야 함
React JS는 어플리케이션이 interactive하도록 만들어주는 library이고
react-dom은 library, 또는 package로 모든 React element들을 HTML body에 둘 수 있도록 함


<body> 안에 React element를 가져다 두기

  const span = React.createElement('span');
      ReactDOM.render(span, );

`render`
: React element를 가지고 HTML로 만들어 배치한다는 것 (= 사용자에게 보여준다)


`ReactDOM`에게 어디에 `span`을 둘 것인지 알려줘야 함

그래서 많은 사람들이 하는 방식은

  <body>
    <div id="root"></div>  <!--마지막으로 적는 html-->

`<body>`에 `<div>`를 적고 `ReactDOM`에게 `span`을 `#root` 안에 두라고 함
이렇게 하려면, 먼저 `root`를 가져와야 함


  // 일반적인 javascript
  const root = document.getElementById("root");

  const span = React.createElement('span');
      ReactDOM.render(span, root);

  // 출력값 html에서
  <body>
    <div id="root">
      <span></span>
    </div>


물론 `<span>`은 지금 비어있음
: `createElement`에는 우리가 더 작성할 수 있는 (argument)가 있음

ex 1) 두 번째 (argument)로 둘 수 있는 것은 `<span>`의 property임
      property는
      - `class name`이 될 수도 있고,
      - `id`가 될 수도 있음

  // 일반적인 javascript
  const root = document.getElementById("root");

  const span = React.createElement('span', {id: "sexy-span"});
      ReactDOM.render(span, root);

  // 출력값 html에서
  <body>
    <div id="root">
      <span id="sexy-span"></span>
    </div>


그래도 여전히 `<span>`이 비어있으니 `<span>`안에 무언가를 넣어보자

ex 2) 세번째 (argument)로  ⇒ 참고로 이건 절대 다시 할일 없는 예시

  const root = document.getElementById('root');
      const span = React.createElement(
        'span',
        { id: sexy - span },
        "Hello I'm a span",
      );
      ReactDOM.render(span, root);

  // 출력값 html에서
  <body>
    <div id="root">
      <span id="sexy-span">Hello I'm a span</span>
    </div>


<style>도 줄 수 있음

  { id: sexy - span, style: { color: 'red' } },

  // 출력값 html에서
  <body>
    <div id="root">
      <span id="sexy-span" style="color: red;">Hello I'm a span</span>
    </div>


이번 강의의 요점은 지루한 예제를 보여줌으로써
React JS는 우리가 해왔던 방식을 거꾸로 하고 있다는 것을 설명한 것
(Javascript에서 시작하고, HTML에서 끝나는)

`React.createElement`
: React JS에게 update가 필요한 HTML element를 update할 것이라는 말
  ⇒ React JS는 user에게 보여질 내용을 컨트롤할 수 있다는 뜻


#2.3 Events in React

만들 것
- 버튼
- 버튼에서 일어나는 `event`를 어떻게 감지하는지

  const root = document.getElementById('root');
      const span = React.createElement('span', null, "Hello I'm a span");
      const btn = React.createElement('button', null, 'Click me');
      ReactDOM.render(btn, root);

  // 출력값 html에서
  <body>
    <div id="root">
      <button>Click me</button>
    </div>


그런데 `<span>`과 `<button>`두 가지 모두 `render`하고 싶다면?

  const root = document.getElementById('root');
      const span = React.createElement('h3', null, "Hello I'm a span");
      const btn = React.createElement('button', null, 'Click me');
      const container = React.createElement('div', null, [span, btn]);
      ReactDOM.render(container, root);

  // 출력값 html에서
  <body>
    <div id="root">
      <div>
        <span>Hello I'm a span</span>
        <button>Click me</button>
      </div>
    </div>

⇒ 기본적으로 2개의 component를 가지는 component를 생성


id=”btn” - <button>을 가져와서 - addEventListener를 붙이고 - listener function을 만드는 과정을
<button>에 peroperty를 주는 React JS로 대체

  const root = document.getElementById('root');
      const h3 = React.createElement(
        'h3',
        {
          id: 'title',
          onMouseEnter: () => console.log('Mouse enter'),
        },
        "Hello I'm a span",
      );
      const btn = React.createElement(
        'button',
        {
          onClick: () => console.log("I'm clicked"),
          style: {
            backgroundColor: 'tomato',
          },
        },
        'Click me',
      );
      const container = React.createElement('div', null, [h3, btn]);
      ReactDOM.render(container, root);


#2.4 Recap

React JS
- element를 생성하고, event listener를 더하는 것을 도와주는 역할
- interactivity의 원동력이라고 할 수 있음

ReactDOM은 React element를 가져다가 HTML로 바꾸는 역할
- 가장 먼저 `<body>`에 비어있는 `<div>`를 생성
- 이 비어있는 `<div>`가 ReactDOM이 React element들을 가져다 놓을 곳
- 그래서 그 `#root` `<div>`를 가져온 후에
- `ReactDOM.render` ⇒ 이 코드의 의미는 React element들을 `#root` `<div>`안에서 보여주라는 뜻


React 개발자로서 `createElement`를 쓸일은 없겠지만,
이게 React JS의 기초 & 핵심 & 어려운 방법임


props 안에서 event listener를 등록할 수 있음
`on + event: () ⇒`


+) 니콜라스가 props 언급하길래 검색해봄

어떤 제품이던 사용자의 입장과 그것을 구현하는 구현자의 입장이 있습니다.
사용자의 입장에서 장치는 버튼, 화면을 터치하는 것 같은
이 제품을 조작하는 것을 "User Interface"라고 부릅니다.
리액트에서는 "props"가 사용자가 제품을 조작하는 장치라고 생각할 수 있습니다.

제품을 만드는 사람이 제품의 내부적인 구현을 위해서,
다양한 상태들을 사용하기 위해서 다양한 내부 장치들이 있습니다.
이를 비유적으로 얘기하자면 "state"라고 할 수 있습니다.

"props"는 사용자가 컴포넌트를 사용하는 입장에서 중요한 것이고,
"props"를 제공하여 컴포넌트를 조작할 수 있게 됩니다.

"state"는 props의 값에 따라 내부의 구현에 필요한 데이터들이라고 구분해서 얘기할 수 있습니다.

리액트로 만든 컴포넌트가 좋은 부품이 되기 위해서는 props와 state는 철저하게 분리되어 있어야 합니다.
사용하는 쪽과 구현하는 쪽을 격리시켜서 양쪽의 편의성을 도모하는 것이 좋은 부품을 만드는 것의 핵심입니다.

출처 사이트
[https://blog.naver.com/siempre_hermosa/222882677559](https://blog.naver.com/siempre_hermosa/222882677559)


#2.5 JSX

`createElement`를 대체할 수 있는 방법으로 JSX,
JSX는 javascript를 확장한 문법

생긴 게 HTML이랑 비슷해서 우리가 HTML에서 사용한 문법과 흡사한 문법을 사용하여
JSX로 React요소를 만드는 게 개발자들 입장에서는 편함

  const h3 = React.createElement(
  "h3",
  {
    id:"title",
    onMouseEnter: () => console.log("mouse enter"),
  },
  "Hello I'm a title"
  );

위 코드를 JSX를 이용해서 똑같은 컴포넌트를 만들어보자

  const Title = <h3 id="title"
  onMouseEnter={() => console.log("mouse enter")}>
  Hello I'm a title</h3>

`onMouseEnter`와 같은 property는 마치 <HTML>태그의 속성인 것처럼 추가


만약 `<image>`가 있으면

  const Title = <img src="" id="title"
  onMouseEnter={() => console.log("mouse enter")}>
  Hello I'm a title</h3>

+) React.JS extension으로 `event listener`들을 처리


  const btn = React.createElement(
  "button",
  {
  onClick: () => console.log("I'm clicked"),
  style: {
    backgroundColor: "tomato",
    },
  },
  "Click me"
  );

위 코드를 JSX를 이용해서 똑같은 컴포넌트를 만들어보자 2

  const Button = (
  <button
    style={{
      backgroundColor: "tomato",
    }}
    onClick={() => console.log("I'm clicked")}
  >
    Click me
  </button>
  );


니콜라스가 `createElement`를 사용하지 않는 이유
: 여러가지 것들을 기억해가면서 진행해야 되기 때문

*문제
저장하고 새로고침 하면 에러가 발생하는데,
브라우저가 온전히 JSX를 이해하는 것은 아니라서 에러가 발생함

브라우저가 JSX를 이해할 수 있게(한 번 변환해주는)설치해야 하는데
Babel은 코드를 변환해주는 녀석인데 우리가 JSX로 적은 코드를 브라우저가 이해할 수 있는 형태로 바꿔줌

Babel standalone 설치 사이트
[https://babeljs.io](https://babeljs.io/)


지금은 배우고 있어서 `<script>` 복붙

  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <script type="text/babel">

이제 `container`를 고쳐주면 부야 ~

  const container = React.createElement('div', null, [Title, Button]);


콘솔창에서 <scrtpt>를 보면 우리가 Babel한테 넘겨준 코드를
Babel이 브라우저가 읽을 수 있는 코드로 바꿔서 <head>에 담아둠


#2.6 JSX part Two

JSX를 사용해서 `render`

  const Container = <div>Title Button</div>
  ReactDOM.render(Container, root);


*문제
새로고침하면 (실제로 에러는 아니지만) 에러가 발생하는데
`const` … like as 정의한 모든 요소들을 하나도 포함시키고 있지 않아서 텍스트만 나타남


Title이나 Button을 포함시키기 위해서

  const Title = () => (
        <h3 id='title' onMouseEnter={() => console.log('mouse enter')}>
          Hello I'm a title
        </h3>
      );

      const Button = () => (
        <button
          style={{
            backgroundColor: 'tomato',
          }}
          onClick={() => console.log("I'm clicked")}
        >
          Click me
        </button>
      );

arrow function를 통해 함수로 만들어줘야 함


위 arrow function은 아래 (기존 우리가 사용하던) `function`과 같음
⇒ 함수를 만들어서 `return`해주는 것과 같음

  function Title() {
    return (
      <h3 id="title" onMouseEnter={() => console.log("mouse enter")>
        Hello I'm a title
      </h3>
    );
  }


마치 일반적인 <HTML> 태그인 것처럼 포함시켜줘야 하는데

  const Container = (
        <div>
          <Title /> <Button />
        </div>
      );

  /* 코드해석
  <div> 태그를 렌더링하고 있는 컴포넌트가 하나 있는데,
  `Title`에 관련된 코드를 포함시키고
  `<Title />`로 적는 건 `return`에 있는 `<h3>`를 복붙하는 것과 같음 */

이렇게 함으로써 여러 컴포넌트들이 합쳐진 구성을 만듦


`Container`도 함수로 수정하고 `render`도 같이 수정

  const Container = () => (
        <div>
          <Title /> <Button />
        </div>
      );
      ReactDOM.render(<Container />, root);


** 직접 만든 컴포넌트를 렌더링 해서 다른 곳에서 사용할 때는
항상 (컴포넌트의 첫 글자는 반드시) 대문자로 작성해야 함
만약 소문자로 작성하면 React랑 JSX는 <HTML>태그인 `<button>`이라고 생각함

위와 같이 JSX는 여러 가지 작은 요소로 나누어 관리할 수 있게 해줌
그래서 여러 요소로 잘게 쪼개서 만들어 합쳐주기만 하면 됨
⇒ 보기 쉽게 코드를 분리한 뒤에 함께 렌더링 한 단 소리

∴ 컴포넌트를 다른 컴포넌트 안에 넣는 방법과 같다